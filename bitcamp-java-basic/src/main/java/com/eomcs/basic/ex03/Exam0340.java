package com.eomcs.basic.ex03;

//# 부동소수점 리터럴 - 유효자릿수
//- 정수처럼 메모리 크기(4바이트 또는 8바이트)에 따라 표현할 수 있는 부동소수점의 범위가 다르다.
//- 단 IEEE 754 명세에 따라 2진수로 변환되기 때문에 
//  정확하게 '소수점 이상 얼마까지 소수점 이하 얼마까지' 식으로 정의할 수 없다.  
//  대신 '유효자릿수'라는 방식으로 대략적으로 값의 범위를 표현한다. 
//
public class Exam0340 {
  public static void main(String[] args) {
    
    //## 4byte(float) 부동소수점의 유효자릿수
    //소수점을 뺀 후 7자리 숫자까지는 거의 정상적으로 저장된다.
    System.out.println("1----------------------------");
    System.out.println(999.9999f);
    System.out.println(999999.9f);
    System.out.println(9.999999f);
    
    
 // 4바이트 메모리는 최대 7자리 부동소수점을 저장할 수 있다.
    // 초과하는 경우 반올림 처리되거나 잘린다.
    System.out.println("2----------------------------");
    System.out.println(999.99994f);
    System.out.println(9999999.4f);
    System.out.println(9.9999994f);

    
    //유효자릿수가 7자리를 넘어가는 경우 값이 잘려서 저장될 수 있다.
    System.out.println("3----------------------------");
    System.out.println(987654321.1234567f);
    System.out.println(9.876543211234567f);
    System.out.println(987654321123456.7f);
    
    
    //## 8byte(double) 부동소수점의 유효자릿수
    //소수점을 뺀 후 16자리 숫자까지는 거의 정상적으로 저장된다.
    System.out.println("4----------------------------");
    System.out.println(987654321.1234567);
    System.out.println(9.876543211234567);
    System.out.println(987654321123456.7);
   
    
    //유효자릿수가 16자리를 넘어가는 경우 값이 잘려서 저장될 수 있다.
    System.out.println("5----------------------------");
    System.out.println(987654321.12345678);
    System.out.println(9.8765432112345678);
    System.out.println(987654321123456.78);
    
 // 유효자릿수
    // - 소수점을 제외한 숫자의 개수
    //
    // 4바이트 메모리에는 최대 7자리까지 저장할 수 있다.
    // 8바이트 메모리에는 최대 16자리까지 저장할 수 있다.
    // 초과하는 수는 반올림 처리되거나 잘린다.
    // 유효자릿수라 하더라도 100% 정확하지는 않다.
    // 왜? IEEE 754 규격에 따라 2진수로 전환할 때 
    // 일부 값은 완전히 정확하게 변환되지 않는 경우도 있다.
   

    //## 부동소수점을 저장할 때 정확하게 저장되지 않는 예
    System.out.println("6----------------------------");
    System.out.println(7 * 0.1); //결과: 0.7000000000000001
  }
  }